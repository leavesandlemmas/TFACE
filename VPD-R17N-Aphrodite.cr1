' T-FACE CR1000 Series Datalogger Program
' Creation date: 2018-06-01
' Last update: 2025-03-28 - JAM
' program authors:  Carl Bernacchi - primary
'                   Chris Montes - modifications
'                   Jesse McGrath - EKM Omnimeter metering code


'  This program will operate the T-FACE Experiment.

'  All IRRs will be read continuously and stored into separate files.

'  There are two total files - one for T-FACE and one for all raw variables.


' SDM-CV04 C1 connected to C1 on CR3000, C2 to C2, C3 to C3
' Out1 to Dimmer 1.
' If additional reps are added in future, then Out2 to Dimmer 2, Out3 to Dimmer 3.
' Out4 to Dimmer 4. Additional SDM-CV04s can also be added.

' Note: The SDM-CV04 needs to be in Voltage Mode and the default as it comes from the
'       factory is Current Mode. Jumpers need to be changed to switch to voltage mode.
'       The first SDM-CV04 needs to have factory default address 0.
'       Another jumper also needes to be changed to set the address of a second
'       SDM-CV04 to be address 1.
'

' EKM Omnimeter 1 v.3 pin 14 connected to CR1000X pin P2
' EKM Omnimeter 1 v.3 pin 15 connected to CR1000X pin ground
' The Omnimeter sends 800 pulses per KWh


' Enter constants for the TFACE IRTs provided by Apogee.
' T-FACE Reference plot SN 1234
Const r_mC2 = 133757
Const r_mC1 = 11739300
Const r_mC0 = 2138210000
Const r_bC2 = 5021.86
Const r_bC1 = 366816
Const r_bC0 = -35064200
Const r_sn  = 1234

' T-FACE Heated plot SN 6184
Const h_mC2 = 66863.6
Const h_mC1 = 7707660
Const h_mC0 = 1377880000
Const h_bC2 = 7400.48
Const h_bC1 = 139180
Const h_bC0 = -3439490
Const h_sn  = 6184

' Below are constants for the control of the heater outputs.
Const twopi = 6.283185
Const piov2 = 1.5708
Const SB = 5.67E-8
Const MODE = -1

' Declare Public Variables
Public Kp, Ki, Kd
Public BattVolt, Pnl_Tmp
Dim Nmbr_Htrs                ' Number heaters per SDM-CV04 output (1000 W Mor FTE)
Public Target
Public T_Diffrns
Public IxKi_sum
Dim PID_out, PID_lmt,
Public ScldOut(4)
Dim T_correct
Public TadjH
Public mV_tpileR
Dim TbodyRK
Public TbodyRC
Dim TtarRK
Public TtarRC
Public mV_tpileH
Dim TbodyHK
Public TbodyHC
Dim TtarHK
Public TtarHC
Public Wind
Dim cons_m, cons_b, 
Public upper_lim, lower_lim, heatmanset, rainon
Dim Eff, Maxrad

' Public variables for power metering using EKM Omnimeter I v.3
Public ekmMeterPulseCount
Public ekmMeterKWh

Dim delta_t            ' Need to set delta_t to execution interval
Dim P_error, D_dMVovdt
Dim Prev_Meas, Prev_Err
Dim Kp_x_P, Kd_x_D, Sum_KpKdKi
Dim r_m, h_m, r_b, h_b
Dim PID_CR, Radjust, Th_Adjust, Rheater, Rreflect, R_IRT

' These are if the RainDetector is located in this plot
' Public raindet
' Public rainctrl

' Define Data Tables (these are the final stored programs)
'  !!!!!!Note to change the name of all the files according to plot.
' This table is for all the heater array raw variables
DataTable (raw, True, -1)           ' Change based on plot
  DataInterval(0, 10, Min, -1)
  Average (1, TbodyRC, IEEE4, 0)
  Average (1, TbodyHC, IEEE4, 0)
  Average (1, mV_tpileR, IEEE4, 0)
  Average (1, mV_tpileH, IEEE4, 0)
  Average (1, TadjH, IEEE4, 0)
  Sample  (1, Target, IEEE4)
  Average (1, PID_out, IEEE4, 0)
  Average (1, PID_lmt, IEEE4, 0)
  Average (1, ScldOut, IEEE4, 0)
  Average (1, Pnl_Tmp, IEEE4, 0)
  Sample (1, heatmanset, IEEE4)
  Average (1, rainon, FP2, 0)
  Totalize (1, ekmMeterPulseCount, UINT4, 0)
  Sample (1, ekmMeterKWh, IEEE4)
EndTable

DataTable(irr_params, True, -1)
  ' TableFile("CPU:" + Status.SerialNumber + "_param_log", 8, -1, 0, 0, Hr, 0, 0) 
  Sample(1, r_mC2, IEEE4)
  Sample(1, r_mC1, IEEE4)
  Sample(1, r_mC0, IEEE4)
  Sample(1, r_bC2, IEEE4)
  Sample(1, r_bC1, IEEE4)
  Sample(1, r_bC0, IEEE4)
  Sample(1, r_sn,  UINT2)
  Sample(1, h_mC2, IEEE4)
  Sample(1, h_mC1, IEEE4)
  Sample(1, h_mC0, IEEE4)
  Sample(1, h_bC2, IEEE4)
  Sample(1, h_bC1, IEEE4)
  Sample(1, h_bC0, IEEE4)
  Sample(1, h_sn,  UINT2)
EndTable

'  This Table is for the T-FACE critical variables.
DataTable (Control, True, -1)       ' Change based on plot
  DataInterval(0, 10, Min, -1)
  Average (1, TtarRC, IEEE4, 0)
  Average (1, TtarHC, IEEE4, 0)
  Average (1, TadjH, IEEE4, 0)
  Average (1, T_Diffrns, IEEE4, 0)
  Sample  (1, Target, IEEE4)
  Average (1, ScldOut, IEEE4, 0)
  Average (1, rainon, IEEE4, 0)
EndTable


'  Subroutine to compute PID output control signal
'  Original version written with EDLOG by Tony Wahl from Campbell Scientific
Sub PIRcontrol
  ' First set
  P_error = T_Diffrns - Target                    ' PROPORTIONAL
  Kp_x_P = P_error * Kp

  D_dMVovdt = (T_Diffrns - Prev_Meas) / delta_t   ' DERIVATIVE
  Kd_x_D = Kd * D_dMVovdt

  Prev_Err = (Prev_Err + P_error) / 2  ' Average error  INTEGRAL
  Prev_Err = Prev_Err * delta_t
  Prev_Err = Prev_Err * Ki            ' Next Ki increment
  IxKi_sum = IxKi_sum + Prev_Err    ' I = integral of error
  Sum_KpKdKi = Kp_x_P + Kd_x_D + IxKi_sum
  PID_out = Kp_x_P + Kd_x_D + IxKi_sum
  PID_out = PID_out * MODE         ' Change sign according to +/- mode
  Prev_Meas = T_Diffrns            ' Shift measured to Prev_meas for next time step
  Prev_Err = T_Diffrns - Target    ' Store previous error to get ready for next time step

EndSub


'  Adjust the apparent temperature in the heated plot for radiation reflected
'  from the heaters.
Sub CorrectRef
  ' Assume: fraction of thermal energy emitted by heater in the 8 to 14 um band
  '        sensed by Apogee IRR-P is 0.14 for heater at 600 degrees C.
  '        Multiply by 0.9 for window transmittance > 0.13.

  ' Assume: fraction of thermal energy emitted by canopy in the 8 to 14 um band
  '        sensed by Apogee IRR-P5 is 0.37 as per canopy at 20 degrees C.
  '        Multipy by 0.9 for window transmittance > 0.33.

  ' Assume: emissivity of plant canopy = 0.98

  Eff = 10 + 25 * EXP(-0.17 * Wind)  ' Compute efficiency of heater system (%) from wind (m/s)
  Maxrad = Nmbr_Htrs * 1000 * (Eff / 100) / 7.07 ' Compute max down rad over 7.07 m^2 plot
  Rheater = Maxrad * (PID_CR / 10)^2 ' Scale in proportion to the square of the
                                     ' last value of PID control, so that have full
                                     ' correction when heaters fully on and no correction
                                     ' when heaters off.
  Rreflect = Rheater * (1 - 0.98) * 0.13              ' Calculate radiation from heater reflected by canopy
                                                      ' in 8-14 um band.
  R_IRT = 0.33 * SB * (T_correct + 273.15)^4          ' Calculate amount of energy sensed by IRT
  Radjust  = R_IRT - Rreflect                         ' Subtract the rediation from the heater
  Th_Adjust = ((Radjust / (SB * 0.33))^0.25) - 273.15 ' Calculate temperature from the radiation

  ' Note: No adjustment for canopy emmissivity and reflected sky radiation are being
  ' because it is assumed that these will be the same in the reference plot.
EndSub



'****************************************************************************************
' Main Program
BeginProg
    Scan(1, sec, 0, 1)  ' Log the IRR parameters only once, at the start of the program.
        CallTable irr_params
        ExitScan
    NextScan
  ' The following are constants for this experiment.  They represent the defaults by can be
  ' changed real-time when the program is running.  Because these are all placed before the
  ' 'Scan' command (below) they are set when the program first compiles and then not again.
  ' This means you can change them from the default when the programm is running without having
  ' to recompile the program.  They can be changed via a 'connected' datalogger (from the graphs
  ' or Num Display options when connected.

  Nmbr_Htrs = 24   ' Number of Mor FTE heaters (1000W)
  Target = 2.5     ' Temperature rise (degrees C) of heated plot in T-FACE above reference plot in daytime
  Kp = 50          ' Tuning constants
  Ki = 0.5
  Kd = 5
  cons_m = 0.03
  cons_b = 2.5
  upper_lim = 10   ' This is the upper limit of the heaters.  Max is 10.
  lower_lim = 3.5  ' This is the lowest output value of the heaters.  Lowest is 0
  heatmanset = 0   ' This is the manual control option.  -1 means automatic control.  0-10 is
                   ' the scaled output from 0 to 10.  Anything other then -1 to 10 will create
                   ' a time-space anomaly which would destroy the universe.  Maybe.
  delta_t = 5      ' Execution interval.  This must match with the 'Scan' interval below.

  ' This is if the rain detector is located in this plot.
  ' rainctrl = -1


  PulseCountReset  ' This resets all pulse counts.  Not sure if it's needed, but whatever.

  Scan (5, Sec, 0, 0)


    PanelTemp (Pnl_Tmp, _60Hz) ' This is the data logger temperature
    Battery (BattVolt)         ' This tells us the voltage of the battery powering the data logger.
    PulseCount (Wind, 1, 1, 0, 1, 0.09462, 0.2) ' This is for an optional wind speed sensor, which
                                                ' can be used to determine heater efficiency.

    ' This section will collect the IRR measurements from the T-FACE IRRs (both ref and heated).

    ' *******T-FACE***********
    ' Measure thermopile voltages of T-FACE Reference IRTs
    VoltDiff(mV_tpileR, 1, mV7_5, 1, True , 0, _60Hz, 1.0, 0) ' Diff channel 1
    ' Measure ratios Vx/Vb of body thermistors of Reference IRTs
    Therm109(TbodyRC, 1, 5, Vx1, 0, _60Hz, 1.0, 0) ' SE channel 5

    ' Calculation of m (slope) and b (intercept) coefficients for target temperature calculation
    r_m = r_mC2 * TbodyRC^2 + r_mC1 * TbodyRC + r_mC0
    r_b = r_bC2 * TbodyRC^2 + r_bC1 * TbodyRC + r_bC0

    ' Calculation of target temperature
    TbodyRK = TbodyRC + 273.15
    TtarRK = (TbodyRK^4 + r_m *mV_tpileR + r_b)^0.25
    TtarRC = TtarRK - 273.15

    ' For Heated Plots
    ' Measure thermopile voltages of T-FACE Heated IRTs
    VoltDiff (mV_tpileH, 1, mV7_5C, 2, True , 0, _60Hz, 1.0, 0)
    ' Measure ratios Vx/Vb of body thermistors of Heated IRTs
    Therm109 (TbodyHC, 1, 6, Vx1, 0, _60Hz, 1.0, 0)
    ' Calculation of m (slope) and b (intercept) coefficients for target temperature calculation
    h_m = h_mC2 * TbodyHC^2 + h_mC1 * TbodyHC + h_mC0
    h_b = h_bC2 * TbodyHC^2 + h_bC1 * TbodyHC + h_bC0

    ' Calculation of target temperature
    TbodyHK = TbodyHC + 273.15
    TtarHK = (TbodyHK^4 + h_m * mV_tpileH + h_b)^0.25
    TtarHC = TtarHK - 273.15


    '*******************************************************
    ' Do an adjustment of the temperature in the heated plot for thermal radiation
    ' from the heaters that is reflected from the crop canopy to the IRT
    T_correct = TtarHC
    PID_CR = PID_lmt
    Call CorrectRef
    TadjH = Th_Adjust

    ' Compute temperature differnce between heated and control plots
    T_Diffrns = TadjH-TtarRC

    Call PIRcontrol    ' Compute PID control signal


    PID_lmt = PID_out
    PID_lmt = PID_lmt * cons_m + cons_b

    If PID_lmt < lower_lim Then PID_lmt = lower_lim  ' Set lower limit
    If PID_lmt > upper_lim Then PID_lmt = upper_lim  ' Set upper limit

    If heatmanset < 0 Then
      ' Set maximum temperature in the heated plot - presently same threshold for both experiments

      If TtarHC > 42 OR rainon = -1 Then

        PID_lmt = lower_lim
      Else
        PID_lmt = PID_lmt
      EndIf
    Else
      PID_lmt = heatmanset
    EndIf

    ' Set maximum temperature difference - different for each experiment
     If T_Diffrns > Target + 2 Then IxKi_sum = 0




    ScldOut(1) = PID_lmt * 1000   ' Scale from volts to mV
    ScldOut(2) = PID_lmt * 1000   ' Scale from volts to mV
    ScldOut(3) = PID_lmt * 1000   ' Scale from volts to mV
    ScldOut(4) = PID_lmt * 1000   ' Scale from volts to mV

    '***********************************************************
    SDMCVO4 (ScldOut(), 4, 0, 10)' Send instruction to SDM-CV04s (mV, reps, SDMaddress, volts)
    '**********************************************************

    ' This is the rain detector code.  It should be present in only one plot.
    ' ReadIO(raindet, 8) ' This checks is there is a 5V signal coming into C4.
    ' If there is, it is raining. Only Necessary on Plot 5.
    '    If raindet = 8 AND rainctrl =-1 Then
    '      rainon =  -1
    '    Else
    '      rainon = 0
    '    EndIf

    ' EKM Omnimeter read pulse count and convert to KW*H
    ' I know the conversion can be done in one step with PulseCount() but want both the raw count and the conversion
    PulseCount(ekmMeterPulseCount, 1, 2, 1, 0, 1, 0)
    ekmMeterKWh = ekmMeterPulseCount / 800


    CallTable raw      ' Change based on plot
    CallTable control  ' Change based on plot

  NextScan
EndProg


  ¶                   
